package common

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"unicode"
)

func convertToSnakeCase(input string) string {
	var result []rune

	for i, char := range input {
		// Kiểm tra xem ký tự tiếp theo có phải là ký tự viết hoa không
		if i > 0 && unicode.IsUpper(char) {
			// Nếu là ký tự viết hoa, thêm dấu gạch dưới trước
			result = append(result, '_')
		}
		// Chuyển đổi ký tự thành chữ thường
		result = append(result, unicode.ToLower(char))
	}

	return string(result)
}

/*
* handle valid request param
* param : slice []byte that generated by read req.body
* struct_type: the type of struct that the server wants to check is valid
todo: add pram exception ...string if any field in struct_type no need to check exist ~ but still check type validate
*/
func ValidateRequestParam(param []byte, struct_type interface{}) error {
	var param_json map[string]interface{}
	list_field_missing := []string{}
	list_field_wrong_type := []string{}
	if err := json.Unmarshal(param, &param_json); err != nil {
		return fmt.Errorf("json is invalid: %v", err)
	}
	valueType := reflect.TypeOf(struct_type)

	for i := 0; i < valueType.NumField(); i++ {
		field := valueType.Field(i)
		field_name := convertToSnakeCase(field.Name)
		field_type := field.Type.Kind()

		if _, ok := param_json[field_name]; !ok {
			list_field_missing = append(list_field_missing, fmt.Sprint(field_name))
		} else {
			if field_type != reflect.TypeOf(param_json[field_name]).Kind() {
				list_field_wrong_type = append(list_field_wrong_type, fmt.Sprint(field_name))
			}
		}
	}

	if len(list_field_missing) > 0 || len(list_field_wrong_type) > 0 {
		var missingMsg, typeMsg string

		if len(list_field_missing) > 0 {
			missingMsg = "missing field(s): " + strings.Join(list_field_missing, ", ")
		}

		if len(list_field_wrong_type) > 0 {
			typeMsg = "wrong data type(s): " + strings.Join(list_field_wrong_type, ", ")
		}
		if missingMsg != "" && typeMsg != "" {
			return fmt.Errorf("%s and %s", missingMsg, typeMsg)
		}
		return fmt.Errorf("%s%s", missingMsg, typeMsg)
	} else {
		return nil
	}
}

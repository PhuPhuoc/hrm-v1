package common

import (
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"net/http"
	"reflect"
	"strings"
	"unicode"
)

func convertToSnakeCase(input string) string {
	var result []rune

	for i, char := range input {
		// Kiểm tra xem ký tự tiếp theo có phải là ký tự viết hoa không
		if i > 0 && unicode.IsUpper(char) {
			// Nếu là ký tự viết hoa, thêm dấu gạch dưới trước
			result = append(result, '_')
		}
		// Chuyển đổi ký tự thành chữ thường
		result = append(result, unicode.ToLower(char))
	}

	return string(result)
}

/*
handle valid request param
param : slice []byte that generated by read req.body
struct_type: the type of struct that the server wants to check is valid
*/
func ValidateRequestParam(param []byte, struct_type interface{}) error {
	var json_type map[string]interface{}
	list_field_missing := []string{}
	if err := json.Unmarshal(param, &json_type); err != nil {
		return fmt.Errorf("json is invalid: %v", err)
	}
	valueType := reflect.TypeOf(struct_type)

	for i := 0; i < valueType.NumField(); i++ {
		field := valueType.Field(i)
		field_name := convertToSnakeCase(field.Name)

		if _, ok := json_type[field_name]; !ok {
			list_field_missing = append(list_field_missing, fmt.Sprint(field_name))
		}
	}

	if len(list_field_missing) > 0 {
		joined_field := strings.Join(list_field_missing, ", ")
		return fmt.Errorf("missing field: %v in request body", joined_field)
	} else {
		return nil
	}
}

// handle write json when response to client
func WriteJSON(w http.ResponseWriter, response any) error {
	w.Header().Set("Content-Type", "application/json")

	if res, ok := response.(*error_response); ok {
		w.WriteHeader(res.StatusCode)
	}

	if _, ok := response.(*success_response); ok {
		w.WriteHeader(http.StatusOK)
	}
	return json.NewEncoder(w).Encode(response)
}

// create hash password
func GenerateHash(password string) string {
	hasher := md5.New()
	hasher.Write([]byte(password))
	hash := hasher.Sum(nil)
	return hex.EncodeToString(hash)
}

// check account password is match vs passwordhash or not
func CompareHash(password string, hash string) bool {
	newPasswordHash := GenerateHash(password)
	return newPasswordHash == hash
}
